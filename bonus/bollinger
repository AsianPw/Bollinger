#! /usr/bin/env ruby

require 'optparse'
require 'matplotlib/pyplot'
require_relative 'lib/ParseArg'
require_relative 'lib/Display'
require_relative 'lib/Data'
require_relative 'lib/MovingAverage'

plt = Matplotlib::Pyplot

SPACE = '    '
USAGE_1 = "#{SPACE}period\t\tnumber of indexes for the moving average\n"
USAGE_2 = "#{SPACE}standard_dev\tstandard deviation coefficient to apply\n"
USAGE_3 = "#{SPACE}indexes_file\tfile containing daily indexes\n"
USAGE_4 = "#{SPACE}index_number\tindex number to compute moving average and Bollinger bands\n\n"
USAGE_HEADER = "Bollinger Bands\n\nUSAGE:\n#{SPACE}./bollinger [-h] period standard_dev indexes_file index_number\n\n"
USAGE = "#{USAGE_HEADER}#{USAGE_1}#{USAGE_2}#{USAGE_3}#{USAGE_4}"
OPTIONS = "OPTIONS:\n#{SPACE}-h\t\t\tprint the usage and quit.\n#{SPACE}-g\t\t\tdisplay graph (MA, B+, B-)"

opt = {graph: false}

options = OptionParser.new do|opts|
  opts.on('-h', '--help', 'Displays Help') do
    puts USAGE
    puts OPTIONS
    exit 0
  end

  opts.on('-g', '--graphic', 'Display graph (MA, B+, B-)') do
    opt[:graph] = true
  end
end

begin
  options.parse!
rescue OptionParser::InvalidOption => e
    STDERR.puts "#{e}"
    exit 84
end

clean_arg = ParseArg.new(ARGV).clean_arg

content = GetData.get_data_from(ARGV[2])

Display.input(clean_arg)
output_data = {mov_average: 0.0, st_dev: 0.0, lower_b: 0.0, high_b: 0.0}

batch = GetData.create_batch(clean_arg[:index], clean_arg[:period], content)

output_data[:mov_average] = MovingAverage.compute(batch, clean_arg[:period])
output_data[:st_dev] = MovingAverage.compute_standard_dev(batch)
output_data[:lower_b] = MovingAverage.compute_band(output_data[:mov_average], output_data[:st_dev], clean_arg[:sd_dev], true)
output_data[:high_b] = MovingAverage.compute_band(output_data[:mov_average], output_data[:st_dev], clean_arg[:sd_dev], false)
Display.output(output_data)

if opt[:graph]
  moving_a = Array.new
  lower_b = Array.new
  high_b = Array.new

  content.each_with_index do |value, index|
    period = ((index < clean_arg[:period]) ? index + 1 : clean_arg[:period])
    batch = GetData.create_batch(index, period, content)
    moving_a << MovingAverage.compute(batch, period)
    standard_dev = MovingAverage.compute_standard_dev(batch)
    lower_b << MovingAverage.compute_band(moving_a[index], standard_dev, clean_arg[:sd_dev], true)
    high_b << MovingAverage.compute_band(moving_a[index], standard_dev, clean_arg[:sd_dev], false)
  end

  abs = (1..content.size).to_a
  plt.plot(abs, content, abs, moving_a, abs, lower_b, abs, high_b)
  plt.show()
end
